// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package nats

import (
	"sync"
)

var (
	lockSubscriptionMockClose       sync.RWMutex
	lockSubscriptionMockUnsubscribe sync.RWMutex
)

// SubscriptionMock is a mock implementation of Subscription.
//
//     func TestSomethingThatUsesSubscription(t *testing.T) {
//
//         // make and configure a mocked Subscription
//         mockedSubscription := &SubscriptionMock{
//             CloseFunc: func() error {
// 	               panic("TODO: mock out the Close method")
//             },
//             UnsubscribeFunc: func() error {
// 	               panic("TODO: mock out the Unsubscribe method")
//             },
//         }
//
//         // TODO: use mockedSubscription in code that requires Subscription
//         //       and then make assertions.
//
//     }
type SubscriptionMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// UnsubscribeFunc mocks the Unsubscribe method.
	UnsubscribeFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Unsubscribe holds details about calls to the Unsubscribe method.
		Unsubscribe []struct {
		}
	}
}

// Close calls CloseFunc.
func (mock *SubscriptionMock) Close() error {
	if mock.CloseFunc == nil {
		panic("moq: SubscriptionMock.CloseFunc is nil but Subscription.Close was just called")
	}
	callInfo := struct {
	}{}
	lockSubscriptionMockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	lockSubscriptionMockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedSubscription.CloseCalls())
func (mock *SubscriptionMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	lockSubscriptionMockClose.RLock()
	calls = mock.calls.Close
	lockSubscriptionMockClose.RUnlock()
	return calls
}

// Unsubscribe calls UnsubscribeFunc.
func (mock *SubscriptionMock) Unsubscribe() error {
	if mock.UnsubscribeFunc == nil {
		panic("moq: SubscriptionMock.UnsubscribeFunc is nil but Subscription.Unsubscribe was just called")
	}
	callInfo := struct {
	}{}
	lockSubscriptionMockUnsubscribe.Lock()
	mock.calls.Unsubscribe = append(mock.calls.Unsubscribe, callInfo)
	lockSubscriptionMockUnsubscribe.Unlock()
	return mock.UnsubscribeFunc()
}

// UnsubscribeCalls gets all the calls that were made to Unsubscribe.
// Check the length with:
//     len(mockedSubscription.UnsubscribeCalls())
func (mock *SubscriptionMock) UnsubscribeCalls() []struct {
} {
	var calls []struct {
	}
	lockSubscriptionMockUnsubscribe.RLock()
	calls = mock.calls.Unsubscribe
	lockSubscriptionMockUnsubscribe.RUnlock()
	return calls
}
