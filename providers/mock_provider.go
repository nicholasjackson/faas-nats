// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package providers

import (
	"github.com/DataDog/datadog-go/statsd"
	"github.com/hashicorp/go-hclog"
	"sync"
)

var (
	lockProviderMockDirection sync.RWMutex
	lockProviderMockListen    sync.RWMutex
	lockProviderMockName      sync.RWMutex
	lockProviderMockPublish   sync.RWMutex
	lockProviderMockSetup     sync.RWMutex
	lockProviderMockStop      sync.RWMutex
	lockProviderMockType      sync.RWMutex
)

// ProviderMock is a mock implementation of Provider.
//
//     func TestSomethingThatUsesProvider(t *testing.T) {
//
//         // make and configure a mocked Provider
//         mockedProvider := &ProviderMock{
//             DirectionFunc: func() string {
// 	               panic("TODO: mock out the Direction method")
//             },
//             ListenFunc: func() (<-chan *Message, error) {
// 	               panic("TODO: mock out the Listen method")
//             },
//             NameFunc: func() string {
// 	               panic("TODO: mock out the Name method")
//             },
//             PublishFunc: func(in1 []byte) ([]byte, error) {
// 	               panic("TODO: mock out the Publish method")
//             },
//             SetupFunc: func(cp ConnectionPool, log hclog.Logger, stats *statsd.Client) error {
// 	               panic("TODO: mock out the Setup method")
//             },
//             StopFunc: func() error {
// 	               panic("TODO: mock out the Stop method")
//             },
//             TypeFunc: func() string {
// 	               panic("TODO: mock out the Type method")
//             },
//         }
//
//         // TODO: use mockedProvider in code that requires Provider
//         //       and then make assertions.
//
//     }
type ProviderMock struct {
	// DirectionFunc mocks the Direction method.
	DirectionFunc func() string

	// ListenFunc mocks the Listen method.
	ListenFunc func() (<-chan *Message, error)

	// NameFunc mocks the Name method.
	NameFunc func() string

	// PublishFunc mocks the Publish method.
	PublishFunc func(in1 []byte) ([]byte, error)

	// SetupFunc mocks the Setup method.
	SetupFunc func(cp ConnectionPool, log hclog.Logger, stats *statsd.Client) error

	// StopFunc mocks the Stop method.
	StopFunc func() error

	// TypeFunc mocks the Type method.
	TypeFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Direction holds details about calls to the Direction method.
		Direction []struct {
		}
		// Listen holds details about calls to the Listen method.
		Listen []struct {
		}
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// In1 is the in1 argument value.
			In1 []byte
		}
		// Setup holds details about calls to the Setup method.
		Setup []struct {
			// Cp is the cp argument value.
			Cp ConnectionPool
			// Log is the log argument value.
			Log hclog.Logger
			// Stats is the stats argument value.
			Stats *statsd.Client
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
		// Type holds details about calls to the Type method.
		Type []struct {
		}
	}
}

// Direction calls DirectionFunc.
func (mock *ProviderMock) Direction() string {
	if mock.DirectionFunc == nil {
		panic("moq: ProviderMock.DirectionFunc is nil but Provider.Direction was just called")
	}
	callInfo := struct {
	}{}
	lockProviderMockDirection.Lock()
	mock.calls.Direction = append(mock.calls.Direction, callInfo)
	lockProviderMockDirection.Unlock()
	return mock.DirectionFunc()
}

// DirectionCalls gets all the calls that were made to Direction.
// Check the length with:
//     len(mockedProvider.DirectionCalls())
func (mock *ProviderMock) DirectionCalls() []struct {
} {
	var calls []struct {
	}
	lockProviderMockDirection.RLock()
	calls = mock.calls.Direction
	lockProviderMockDirection.RUnlock()
	return calls
}

// Listen calls ListenFunc.
func (mock *ProviderMock) Listen() (<-chan *Message, error) {
	if mock.ListenFunc == nil {
		panic("moq: ProviderMock.ListenFunc is nil but Provider.Listen was just called")
	}
	callInfo := struct {
	}{}
	lockProviderMockListen.Lock()
	mock.calls.Listen = append(mock.calls.Listen, callInfo)
	lockProviderMockListen.Unlock()
	return mock.ListenFunc()
}

// ListenCalls gets all the calls that were made to Listen.
// Check the length with:
//     len(mockedProvider.ListenCalls())
func (mock *ProviderMock) ListenCalls() []struct {
} {
	var calls []struct {
	}
	lockProviderMockListen.RLock()
	calls = mock.calls.Listen
	lockProviderMockListen.RUnlock()
	return calls
}

// Name calls NameFunc.
func (mock *ProviderMock) Name() string {
	if mock.NameFunc == nil {
		panic("moq: ProviderMock.NameFunc is nil but Provider.Name was just called")
	}
	callInfo := struct {
	}{}
	lockProviderMockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	lockProviderMockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedProvider.NameCalls())
func (mock *ProviderMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	lockProviderMockName.RLock()
	calls = mock.calls.Name
	lockProviderMockName.RUnlock()
	return calls
}

// Publish calls PublishFunc.
func (mock *ProviderMock) Publish(in1 []byte) ([]byte, error) {
	if mock.PublishFunc == nil {
		panic("moq: ProviderMock.PublishFunc is nil but Provider.Publish was just called")
	}
	callInfo := struct {
		In1 []byte
	}{
		In1: in1,
	}
	lockProviderMockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	lockProviderMockPublish.Unlock()
	return mock.PublishFunc(in1)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedProvider.PublishCalls())
func (mock *ProviderMock) PublishCalls() []struct {
	In1 []byte
} {
	var calls []struct {
		In1 []byte
	}
	lockProviderMockPublish.RLock()
	calls = mock.calls.Publish
	lockProviderMockPublish.RUnlock()
	return calls
}

// Setup calls SetupFunc.
func (mock *ProviderMock) Setup(cp ConnectionPool, log hclog.Logger, stats *statsd.Client) error {
	if mock.SetupFunc == nil {
		panic("moq: ProviderMock.SetupFunc is nil but Provider.Setup was just called")
	}
	callInfo := struct {
		Cp    ConnectionPool
		Log   hclog.Logger
		Stats *statsd.Client
	}{
		Cp:    cp,
		Log:   log,
		Stats: stats,
	}
	lockProviderMockSetup.Lock()
	mock.calls.Setup = append(mock.calls.Setup, callInfo)
	lockProviderMockSetup.Unlock()
	return mock.SetupFunc(cp, log, stats)
}

// SetupCalls gets all the calls that were made to Setup.
// Check the length with:
//     len(mockedProvider.SetupCalls())
func (mock *ProviderMock) SetupCalls() []struct {
	Cp    ConnectionPool
	Log   hclog.Logger
	Stats *statsd.Client
} {
	var calls []struct {
		Cp    ConnectionPool
		Log   hclog.Logger
		Stats *statsd.Client
	}
	lockProviderMockSetup.RLock()
	calls = mock.calls.Setup
	lockProviderMockSetup.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *ProviderMock) Stop() error {
	if mock.StopFunc == nil {
		panic("moq: ProviderMock.StopFunc is nil but Provider.Stop was just called")
	}
	callInfo := struct {
	}{}
	lockProviderMockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	lockProviderMockStop.Unlock()
	return mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedProvider.StopCalls())
func (mock *ProviderMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	lockProviderMockStop.RLock()
	calls = mock.calls.Stop
	lockProviderMockStop.RUnlock()
	return calls
}

// Type calls TypeFunc.
func (mock *ProviderMock) Type() string {
	if mock.TypeFunc == nil {
		panic("moq: ProviderMock.TypeFunc is nil but Provider.Type was just called")
	}
	callInfo := struct {
	}{}
	lockProviderMockType.Lock()
	mock.calls.Type = append(mock.calls.Type, callInfo)
	lockProviderMockType.Unlock()
	return mock.TypeFunc()
}

// TypeCalls gets all the calls that were made to Type.
// Check the length with:
//     len(mockedProvider.TypeCalls())
func (mock *ProviderMock) TypeCalls() []struct {
} {
	var calls []struct {
	}
	lockProviderMockType.RLock()
	calls = mock.calls.Type
	lockProviderMockType.RUnlock()
	return calls
}
