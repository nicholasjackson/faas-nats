// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package client

import (
	"sync"
)

var (
	lockClientMockCallFunction sync.RWMutex
)

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             CallFunctionFunc: func(name string, query string, payload []byte) ([]byte, error) {
// 	               panic("TODO: mock out the CallFunction method")
//             },
//         }
//
//         // TODO: use mockedClient in code that requires Client
//         //       and then make assertions.
//
//     }
type ClientMock struct {
	// CallFunctionFunc mocks the CallFunction method.
	CallFunctionFunc func(name string, query string, payload []byte) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// CallFunction holds details about calls to the CallFunction method.
		CallFunction []struct {
			// Name is the name argument value.
			Name string
			// Query is the query argument value.
			Query string
			// Payload is the payload argument value.
			Payload []byte
		}
	}
}

// CallFunction calls CallFunctionFunc.
func (mock *ClientMock) CallFunction(name string, query string, payload []byte) ([]byte, error) {
	if mock.CallFunctionFunc == nil {
		panic("moq: ClientMock.CallFunctionFunc is nil but Client.CallFunction was just called")
	}
	callInfo := struct {
		Name    string
		Query   string
		Payload []byte
	}{
		Name:    name,
		Query:   query,
		Payload: payload,
	}
	lockClientMockCallFunction.Lock()
	mock.calls.CallFunction = append(mock.calls.CallFunction, callInfo)
	lockClientMockCallFunction.Unlock()
	return mock.CallFunctionFunc(name, query, payload)
}

// CallFunctionCalls gets all the calls that were made to CallFunction.
// Check the length with:
//     len(mockedClient.CallFunctionCalls())
func (mock *ClientMock) CallFunctionCalls() []struct {
	Name    string
	Query   string
	Payload []byte
} {
	var calls []struct {
		Name    string
		Query   string
		Payload []byte
	}
	lockClientMockCallFunction.RLock()
	calls = mock.calls.CallFunction
	lockClientMockCallFunction.RUnlock()
	return calls
}
